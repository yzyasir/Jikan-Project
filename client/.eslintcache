[{"C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\index.js":"1","C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\reportWebVitals.js":"2","C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\App.js":"3","C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\views\\Registration.jsx":"4","C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\components\\Form.jsx":"5","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\App.js":"6","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\reportWebVitals.js":"7","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Form.jsx":"8","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\views\\Registration.jsx":"9","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Navbar.jsx":"10","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\views\\Main.js":"11","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\index.js":"12","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Search.jsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":313,"mtime":1607030652488,"results":"17","hashOfConfig":"15"},{"size":2389,"mtime":1607030299197,"results":"18","hashOfConfig":"15"},{"size":2655,"mtime":1607030763203,"results":"19","hashOfConfig":"15"},{"size":404,"mtime":1607836146163,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":3213,"mtime":1607627072895,"results":"23","hashOfConfig":"21"},{"size":2457,"mtime":1607836243563,"results":"24","hashOfConfig":"21"},{"size":1536,"mtime":1607972931734,"results":"25","hashOfConfig":"21"},{"size":295,"mtime":1608345133801,"results":"26","hashOfConfig":"21"},{"size":546,"mtime":1607747711277,"results":"27","hashOfConfig":"21"},{"size":7511,"mtime":1608228444179,"results":"28","hashOfConfig":"21"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fn3kbz",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w8llkh",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\index.js",[],"C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\reportWebVitals.js",[],["60","61"],"C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\App.js",[],"C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\views\\Registration.jsx",["62"],"import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport Form from '../components/Form';\r\nimport { navigate } from '@reach/router';\r\n// import {navigate} from '@reach/router';\r\n\r\nconst Registration = (props) => {\r\n    // The logic for each form that I will be passing in will be different for the registration and edit pages\r\n    \r\n    const [form, setForm] = useState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n    })\r\n\r\n    const [error, setError] = useState({});\r\n\r\n    const onChangeHandler = (eventProp) => { //we will be using this to update our data as we fill out the form, check console to see\r\n        eventProp.preventDefault(); //preventDefault is called on the event when submitting the form to prevent a browser reload/refresh. Try the code without it to see what happens.\r\n        setForm({\r\n            ...form,\r\n            [eventProp.target.firstName]: eventProp.target.value \r\n            //this needs to be eventProp.target.name so that the component in the form updates\r\n            //.target.value retrieves the value of whatever input it was called on, so whatever I insert in input can be accessed through event.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        //this needs to be eventProp.target.name so that the component in the form updates\r\n        //.target.value retrieves the value of whatever input it was called on, so whatever I insert in input can be accessed through event.target.value\r\n        axios.post(\"http://localhost:8000/api/new/user\", form)\r\n        .then(res => {\r\n            if(res.data.error){ //this is basically asking res.data if it has any errors in it\r\n                console.log(res.data.error.errors)\r\n                // setError()\r\n            } else {\r\n                console.log(\"Hey, our on submit worked!\") //otherwise if all is good, let this happen then\r\n                navigate(\"/\") //navigates back to our front page \r\n            }\r\n        })\r\n        .catch(console.log(\"Hey, something went wrong\"))\r\n    } \r\n\r\n    return(\r\n        <div>\r\n            {/* Need to pass onChangeHandler into form to use it */}\r\n            <Form onSubmitHandler={onSubmitHandler} form={form} onChangeHandler={onChangeHandler} error={error} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration;","C:\\Users\\yzyas\\onedrive\\desktop\\projectjikanaccel\\client\\src\\components\\Form.jsx",[],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\App.js",[],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\reportWebVitals.js",[],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Form.jsx",[],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\views\\Registration.jsx",["63"],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Navbar.jsx",[],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\views\\Main.js",["64"],"import React, {useState} from 'react';\r\nimport Navbar from \"../components/Navbar\";\r\nimport Search from '../components/Search';\r\n \r\nconst Main = (props) => {\r\n\r\n    return(\r\n        <div>\r\n            <Navbar /> \r\n            <Search />\r\n       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;","C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\index.js",[],["65","66"],"C:\\Users\\yzyas\\OneDrive\\Desktop\\projectJikanAccel\\client\\src\\components\\Search.jsx",["67"],"import React from 'react';\r\nimport '../components/Search.css'; //we do double dots to get out of directory\r\nimport axios from 'axios'; //this is also where we get out canceltoken, gives data in json format automatically\r\n\r\nclass Search extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props); //all class constructors must call super is they are subclasses, must call super as long as you have a constructor. This will allow us to use props.\r\n        \r\n        this.state = { //we are now able to usr this after the super\r\n            query: '', //we will store the query info here\r\n            results: {}, //we need this to store the results that we recieve from the api\r\n            loading: false, //we want to show loading while the query is being fetched\r\n            message: '' //want to show the message if there is an error or if there is no data available\r\n        }\r\n        this.cancel = ''; //you cancel a request using a cancel token. This is an axios api based cancel token. Cancels the previous request. \r\n        // you put the token into a constructor and set it to empty, WHY DOES IT GO IN THE CONSTRUCTOR?\r\n    }\r\n\r\n    fetchSearchResults = (updatedPageNumber = '', query) => { //initially the number will be 1 but when we intruduce pagenation, it will update page numbers, and it will also take the query we typed in inside the query\r\n        const pageNumber = updatedPageNumber ? `&page=${updatedPageNumber}` : '' //says, if we have any value, lets set the page number dynamically\r\n        const searchUrl = `https://pixabay.com/api/?key=19524930-615e099e88fa1398dd638fdb1&q=${query}${pageNumber}` //in backtick because we need to put in information dynamically\r\n        console.log(\"before the if\")\r\n        // cancel token is necessary because you are making a request every time you type, this is making too many calls, so we do the code below to only search after we are done typing\r\n        if (this.cancel ){ //checks if this.cancel has any value \r\n            this.cancel.cancel(); //if there is a value, then go ahead and cancel the request here, CANCEL TOKEN HAS GOOD DOCUMENTAION FROM AXIOS\r\n        console.log(\"in the if\")\r\n        }\r\n        this.cancel = axios.CancelToken.source(); //if the if statement fails, this line here creates a new cancel token and then sets it equal to this.cancel (it is now stored in cancel)\r\n        console.log(\"after storing the token\")\r\n        axios.get(searchUrl, {cancelToken: this.cancel.token} ) //we already made the const for the request, now just plug it in, check the cancelToken documentary to understand the \"source.token\"\r\n        // .then( res => console.warn(res.data.hits)) //HERE ABOVE\r\n        .then( res => {\r\n            const resultNotFoundMessage = ! res.data.hits.length ? 'There are no more search results. Please try again' : '' //BREAK THIS TERNARY DOWN //its .length because its an array\r\n            this.setState({\r\n                results: res.data.hits, //what you looked for\r\n                message: resultNotFoundMessage, //its the same message above\r\n                loading: false //You have recieved your query, no more need for loader\r\n            })}) //this is the info we want to show the user in case the result was not found\r\n        .catch(err => {\r\n            if(axios.isCancel(err) || err) { //if there is an error from axios in canceling a request, or if there is any other error (|| this means if there is any other error)\r\n                this.setState(\r\n                    { \r\n                    loading: false, //doesnt load or show the loader\r\n                    message: \"failed to fetch the data, please check the network\"\r\n                }) //Adding the {} fixes it because you need to wrap that property initializer in an object literal, so you're passing an object as the second argument to get\r\n            }\r\n        })\r\n    }\r\n\r\n    handleOnInputChange = (event) => {\r\n        const query = event.target.value; //we are storing the query we type in into a const called query, then the query will be available inside event.target.value \r\n        // console.warn(query);   //if you want to make sure, that something only happens after you have certain information set in a state (below) you can do a callback function\r\n        this.setState( {query: query, loading: true, message: ''} , () => { //HERE IT GOES WRONG it = needed to be an anonymous function not stated as a callback, query : query is the property() name and property value\r\n        this.fetchSearchResults(1, query)}  //we do this here because setState is asynchronous, so for this reason, we use a callback, which only works after all of the prior info is set in state\r\n        ); //message is empty so if there was any message set prior it can be used\r\n        //loading is true so we can show the loader (necessary for when we call the api)\r\n    };\r\n\r\n    renderSearchResults = () => {\r\n        const {results} = this.state; //pulling results out of state\r\n        if ( Object.keys(results).length && results.length){ //first we are going to check if there is anything coming in (if weve got the data or not), since results is an object, we use the method Object.keys() and put results in it\r\n            return(\r\n                <div className = \"results-container\">\r\n                    {results.map( resultsItem => {\r\n                        return( //key needs to be unique, so we use the id to make it unique\r\n                            <a key={resultsItem.id} href={resultsItem.previewURL} className=\"results-item\"> \r\n                                <h6 className=\"image-username\">{resultsItem.username}</h6>\r\n                                <div className=\"image-wrapper\">\r\n                                    <img src={resultsItem.previewURL} alt={`${resultsItem.username} image`} className=\"image\"/> \r\n                                </div>\r\n                            </a> //now we can put this function into a render function (this is for cleanliness, not to make our render below too long)\r\n                        )\r\n                    })}\r\n\r\n                </div>\r\n            )\r\n        } \r\n    }\r\n\r\n    render() {\r\n        const {query} = this.state; //we are pulling query from here using object destructuring (pulling query out of state and placing it inside this constant) this is es6\r\n        // console.warn(this.state); //whatever the user types, is appended to the query\r\n        return(\r\n            <div className=\"container\">\r\n                <h2 className=\"heading\">Search Pictures: Find and Comment!</h2>\r\n                <label className=\"search-label\" htmlFor=\"search-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"query\" //CHECK WHAT THIS DOES AGAIN\r\n                        value={query} //later we will put in the states query into here\r\n                        id=\"search-input\" //this is the same as we put in for htmlFor\r\n                        placeholder=\"Search!\" //this is what goes inside \r\n                        onChange={this.handleOnInputChange} //WHY USE .THIS HERE\r\n                    />\r\n                </label> \r\n                <i className=\"fas fa-search search-icon\" aria-hidden=\"true\"></i> {/* must use className instead of class, this i tag is import from font awesome for the seacrh icon, basically just for html */}\r\n\r\n                {/* Results Below */}\r\n                {this.renderSearchResults()}\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":17,"column":19,"nodeType":"74","messageId":"75","endLine":17,"endColumn":27},{"ruleId":"72","severity":1,"message":"73","line":17,"column":19,"nodeType":"74","messageId":"75","endLine":17,"endColumn":27},{"ruleId":"72","severity":1,"message":"76","line":1,"column":16,"nodeType":"74","messageId":"75","endLine":1,"endColumn":24},{"ruleId":"68","replacedBy":"77"},{"ruleId":"70","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":70,"column":37,"nodeType":"81","endLine":70,"endColumn":128},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'setError' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.",["82"],["83"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]